{"ast":null,"code":"const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst fs = require('fs');\nconst app = express();\n\n// Set up multer middleware to handle file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    const ext = path.extname(file.originalname);\n    const name = path.basename(file.originalname, ext);\n    cb(null, name + '-' + Date.now() + ext);\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\n// Define the route for handling file uploads\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file was uploaded.');\n  }\n\n  // Save the uploaded file to the 'uploads' folder inside the project directory\n  const filepath = `${__dirname}/uploads/${req.file.filename}`;\n  fs.writeFile(filepath, req.file.buffer, err => {\n    if (err) {\n      return res.status(500).send('Failed to save file on server.');\n    }\n    res.status(200).send('File uploaded successfully!');\n  });\n});\napp.listen(3000, () => console.log('Server started on port 3000'));","map":{"version":3,"names":["express","require","multer","path","fs","app","storage","diskStorage","destination","req","file","cb","filename","ext","extname","originalname","name","basename","Date","now","upload","post","single","res","status","send","filepath","__dirname","writeFile","buffer","err","listen","console","log"],"sources":["G:/230310pythonproject/230517-gpt-API/my-react-app/src/App.js"],"sourcesContent":["const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst fs = require('fs');\n\nconst app = express();\n\n// Set up multer middleware to handle file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    const ext = path.extname(file.originalname);\n    const name = path.basename(file.originalname, ext);\n    cb(null, name + '-' + Date.now() + ext);\n  }\n});\n\nconst upload = multer({ storage: storage });\n\n// Define the route for handling file uploads\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file was uploaded.');\n  }\n\n  // Save the uploaded file to the 'uploads' folder inside the project directory\n  const filepath = `${__dirname}/uploads/${req.file.filename}`;\n  fs.writeFile(filepath, req.file.buffer, (err) => {\n    if (err) {\n      return res.status(500).send('Failed to save file on server.');\n    }\n\n    res.status(200).send('File uploaded successfully!');\n  });\n});\n\napp.listen(3000, () => console.log('Server started on port 3000'));"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAI,CAAC;AAExB,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;;AAErB;AACA,MAAMM,OAAO,GAAGJ,MAAM,CAACK,WAAW,CAAC;EACjCC,WAAW,EAAE,SAAAA,CAAUC,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAE;IACpCA,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC;EACtB,CAAC;EACDC,QAAQ,EAAE,SAAAA,CAAUH,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAE;IACjC,MAAME,GAAG,GAAGV,IAAI,CAACW,OAAO,CAACJ,IAAI,CAACK,YAAY,CAAC;IAC3C,MAAMC,IAAI,GAAGb,IAAI,CAACc,QAAQ,CAACP,IAAI,CAACK,YAAY,EAAEF,GAAG,CAAC;IAClDF,EAAE,CAAC,IAAI,EAAEK,IAAI,GAAG,GAAG,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGN,GAAG,CAAC;EACzC;AACF,CAAC,CAAC;AAEF,MAAMO,MAAM,GAAGlB,MAAM,CAAC;EAAEI,OAAO,EAAEA;AAAQ,CAAC,CAAC;;AAE3C;AACAD,GAAG,CAACgB,IAAI,CAAC,SAAS,EAAED,MAAM,CAACE,MAAM,CAAC,MAAM,CAAC,EAAE,CAACb,GAAG,EAAEc,GAAG,KAAK;EACvD,IAAI,CAACd,GAAG,CAACC,IAAI,EAAE;IACb,OAAOa,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;EACtD;;EAEA;EACA,MAAMC,QAAQ,GAAI,GAAEC,SAAU,YAAWlB,GAAG,CAACC,IAAI,CAACE,QAAS,EAAC;EAC5DR,EAAE,CAACwB,SAAS,CAACF,QAAQ,EAAEjB,GAAG,CAACC,IAAI,CAACmB,MAAM,EAAGC,GAAG,IAAK;IAC/C,IAAIA,GAAG,EAAE;MACP,OAAOP,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,gCAAgC,CAAC;IAC/D;IAEAF,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,6BAA6B,CAAC;EACrD,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFpB,GAAG,CAAC0B,MAAM,CAAC,IAAI,EAAE,MAAMC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}