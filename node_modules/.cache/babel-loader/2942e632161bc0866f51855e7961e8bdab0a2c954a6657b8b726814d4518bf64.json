{"ast":null,"code":"const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst fs = require('fs');\nconst lark = require('@larksuiteoapi/node-sdk');\nconst app = express();\n\n// Set up multer middleware to handle file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    const ext = path.extname(file.originalname);\n    const name = path.basename(file.originalname, ext);\n    cb(null, name + '-' + Date.now() + ext);\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\n// Initialize the Lark client with your app ID, app secret, and tenant access token\nconst client = new lark.Client({\n  appId: 'cli_a4982ea58219500c',\n  appSecret: 'tElBvhdOKLimO6kJCMer3xndDRs7Du5d',\n  disableTokenCache: true\n});\n\n// Define the route for handling file uploads\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file was uploaded.');\n  }\n\n  // Read the uploaded file content and create a buffer object\n  const fileContent = fs.readFileSync(req.file.path);\n  const fileBuffer = Buffer.from(fileContent);\n\n  // Upload the file to Lark using the file.uploadAll() method\n  const options = {\n    data: {\n      file_name: req.file.originalname,\n      parent_type: 'explorer',\n      parent_node: 'Beoifye2flJ5ZSd3UQHcuXpOnLP',\n      size: req.file.size,\n      file: fileBuffer\n    }\n  };\n  client.drive.file.uploadAll(options, lark.withTenantToken('u-3yCAVfP.Zegqrldb0JssSWk42WtN043zqMG044A007.r')).then(response => {\n    fs.unlinkSync(req.file.path); // Delete the uploaded file from the local disk\n    res.status(200).send('File uploaded successfully!');\n  }).catch(error => {\n    fs.unlinkSync(req.file.path); // Delete the uploaded file from the local disk\n    console.error(error);\n    res.status(500).send('Failed to upload file to Lark.');\n  });\n});\napp.listen(3000, () => console.log('Server started on port 3000'));","map":{"version":3,"names":["express","require","multer","path","fs","lark","app","storage","diskStorage","destination","req","file","cb","filename","ext","extname","originalname","name","basename","Date","now","upload","client","Client","appId","appSecret","disableTokenCache","post","single","res","status","send","fileContent","readFileSync","fileBuffer","Buffer","from","options","data","file_name","parent_type","parent_node","size","drive","uploadAll","withTenantToken","then","response","unlinkSync","catch","error","console","listen","log"],"sources":["G:/230310pythonproject/230517-gpt-API/my-react-app/src/App.js"],"sourcesContent":["const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst fs = require('fs');\nconst lark = require('@larksuiteoapi/node-sdk');\n\nconst app = express();\n\n// Set up multer middleware to handle file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    const ext = path.extname(file.originalname);\n    const name = path.basename(file.originalname, ext);\n    cb(null, name + '-' + Date.now() + ext);\n  }\n});\n\nconst upload = multer({ storage: storage });\n\n// Initialize the Lark client with your app ID, app secret, and tenant access token\nconst client = new lark.Client({\n  appId: 'cli_a4982ea58219500c',\n  appSecret: 'tElBvhdOKLimO6kJCMer3xndDRs7Du5d',\n  disableTokenCache: true\n});\n\n// Define the route for handling file uploads\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file was uploaded.');\n  }\n\n  // Read the uploaded file content and create a buffer object\n  const fileContent = fs.readFileSync(req.file.path);\n  const fileBuffer = Buffer.from(fileContent);\n\n  // Upload the file to Lark using the file.uploadAll() method\n  const options = {\n    data: {\n      file_name: req.file.originalname,\n      parent_type: 'explorer',\n      parent_node: 'Beoifye2flJ5ZSd3UQHcuXpOnLP',\n      size: req.file.size,\n      file: fileBuffer\n    }\n  };\n\n  client.drive.file.uploadAll(\n    options, \n    lark.withTenantToken('u-3yCAVfP.Zegqrldb0JssSWk42WtN043zqMG044A007.r')\n  ).then((response) => {\n    fs.unlinkSync(req.file.path); // Delete the uploaded file from the local disk\n    res.status(200).send('File uploaded successfully!');\n  }).catch((error) => {\n    fs.unlinkSync(req.file.path); // Delete the uploaded file from the local disk\n    console.error(error);\n    res.status(500).send('Failed to upload file to Lark.');\n  });\n});\n\napp.listen(3000, () => console.log('Server started on port 3000'));"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMI,IAAI,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAE/C,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;;AAErB;AACA,MAAMO,OAAO,GAAGL,MAAM,CAACM,WAAW,CAAC;EACjCC,WAAW,EAAE,SAAAA,CAAUC,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAE;IACpCA,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC;EACtB,CAAC;EACDC,QAAQ,EAAE,SAAAA,CAAUH,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAE;IACjC,MAAME,GAAG,GAAGX,IAAI,CAACY,OAAO,CAACJ,IAAI,CAACK,YAAY,CAAC;IAC3C,MAAMC,IAAI,GAAGd,IAAI,CAACe,QAAQ,CAACP,IAAI,CAACK,YAAY,EAAEF,GAAG,CAAC;IAClDF,EAAE,CAAC,IAAI,EAAEK,IAAI,GAAG,GAAG,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGN,GAAG,CAAC;EACzC;AACF,CAAC,CAAC;AAEF,MAAMO,MAAM,GAAGnB,MAAM,CAAC;EAAEK,OAAO,EAAEA;AAAQ,CAAC,CAAC;;AAE3C;AACA,MAAMe,MAAM,GAAG,IAAIjB,IAAI,CAACkB,MAAM,CAAC;EAC7BC,KAAK,EAAE,sBAAsB;EAC7BC,SAAS,EAAE,kCAAkC;EAC7CC,iBAAiB,EAAE;AACrB,CAAC,CAAC;;AAEF;AACApB,GAAG,CAACqB,IAAI,CAAC,SAAS,EAAEN,MAAM,CAACO,MAAM,CAAC,MAAM,CAAC,EAAE,CAAClB,GAAG,EAAEmB,GAAG,KAAK;EACvD,IAAI,CAACnB,GAAG,CAACC,IAAI,EAAE;IACb,OAAOkB,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;EACtD;;EAEA;EACA,MAAMC,WAAW,GAAG5B,EAAE,CAAC6B,YAAY,CAACvB,GAAG,CAACC,IAAI,CAACR,IAAI,CAAC;EAClD,MAAM+B,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACJ,WAAW,CAAC;;EAE3C;EACA,MAAMK,OAAO,GAAG;IACdC,IAAI,EAAE;MACJC,SAAS,EAAE7B,GAAG,CAACC,IAAI,CAACK,YAAY;MAChCwB,WAAW,EAAE,UAAU;MACvBC,WAAW,EAAE,6BAA6B;MAC1CC,IAAI,EAAEhC,GAAG,CAACC,IAAI,CAAC+B,IAAI;MACnB/B,IAAI,EAAEuB;IACR;EACF,CAAC;EAEDZ,MAAM,CAACqB,KAAK,CAAChC,IAAI,CAACiC,SAAS,CACzBP,OAAO,EACPhC,IAAI,CAACwC,eAAe,CAAC,gDAAgD,CACvE,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;IACnB3C,EAAE,CAAC4C,UAAU,CAACtC,GAAG,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC;IAC9B0B,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,6BAA6B,CAAC;EACrD,CAAC,CAAC,CAACkB,KAAK,CAAEC,KAAK,IAAK;IAClB9C,EAAE,CAAC4C,UAAU,CAACtC,GAAG,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC;IAC9BgD,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBrB,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,gCAAgC,CAAC;EACxD,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFzB,GAAG,CAAC8C,MAAM,CAAC,IAAI,EAAE,MAAMD,OAAO,CAACE,GAAG,CAAC,6BAA6B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}