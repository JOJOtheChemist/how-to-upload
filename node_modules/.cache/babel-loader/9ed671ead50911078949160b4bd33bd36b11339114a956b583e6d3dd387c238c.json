{"ast":null,"code":"var _jsxFileName = \"G:\\\\230310pythonproject\\\\230517-gpt-API\\\\my-react-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport lark from '@larksuiteoapi/allcore-sdk';\n// Import any other needed Lark API modules\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass UploadForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      uploadedFileData: null\n    };\n    this.handleFileUpload = event => {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        const fileData = reader.result;\n        localStorage.setItem('uploadedFile', fileData);\n        this.setState({\n          uploadedFileData: fileData\n        });\n      };\n      reader.readAsDataURL(file);\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const {\n        uploadedFileData\n      } = this.state;\n      if (!uploadedFileData) {\n        return;\n      }\n\n      // Initialize the Lark client with your app ID, app secret, and tenant access token\n      const client = new lark.corev2.Client({\n        appId: 'cli_a4982ea58219500c',\n        appSecret: 'tElBvhdOKLimO6kJCMer3xndDRs7Du5d',\n        appBaseUrl: 'https://open.feishu.cn',\n        timeout: 5000,\n        disableTokenCache: true\n      });\n\n      // Upload the PDF file to Lark using the drive.file.uploadAll() method\n      const options = {\n        data: {\n          file_name: 'my_uploaded_pdf.pdf',\n          parent_type: 'explorer',\n          parent_node: 'Beoifye2flJ5ZSd3UQHcuXpOnLP',\n          file: uploadedFileData.substring(uploadedFileData.indexOf(',') + 1)\n        }\n      };\n      try {\n        const response = await client.drive.file.uploadAll(options);\n        console.log('File uploaded successfully!');\n        console.log(response);\n      } catch (error) {\n        console.error('Failed to upload file to Lark');\n        console.error(error);\n      }\n    };\n  }\n  render() {\n    const {\n      uploadedFileData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fileInput\",\n          children: \"Upload PDF:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"fileInput\",\n          accept: \".pdf\",\n          onChange: this.handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !uploadedFileData,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), uploadedFileData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Uploaded PDF:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: uploadedFileData,\n          title: \"Uploaded file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default UploadForm;","map":{"version":3,"names":["React","Component","lark","jsxDEV","_jsxDEV","UploadForm","constructor","arguments","state","uploadedFileData","handleFileUpload","event","file","target","files","reader","FileReader","onload","fileData","result","localStorage","setItem","setState","readAsDataURL","handleSubmit","preventDefault","client","corev2","Client","appId","appSecret","appBaseUrl","timeout","disableTokenCache","options","data","file_name","parent_type","parent_node","substring","indexOf","response","drive","uploadAll","console","log","error","render","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","accept","onChange","disabled","src","title"],"sources":["G:/230310pythonproject/230517-gpt-API/my-react-app/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport lark from '@larksuiteoapi/allcore-sdk';\n// Import any other needed Lark API modules\n\nclass UploadForm extends Component {\n  state = {\n    uploadedFileData: null,\n  };\n\n  handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      const fileData = reader.result;\n      localStorage.setItem('uploadedFile', fileData);\n      this.setState({ uploadedFileData: fileData });\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const { uploadedFileData } = this.state;\n\n    if (!uploadedFileData) {\n      return;\n    }\n\n    // Initialize the Lark client with your app ID, app secret, and tenant access token\n    const client = new lark.corev2.Client({\n      appId: 'cli_a4982ea58219500c',\n      appSecret: 'tElBvhdOKLimO6kJCMer3xndDRs7Du5d',\n      appBaseUrl: 'https://open.feishu.cn',\n      timeout: 5000,\n      disableTokenCache: true\n    });\n\n    // Upload the PDF file to Lark using the drive.file.uploadAll() method\n    const options = {\n      data: {\n        file_name: 'my_uploaded_pdf.pdf',\n        parent_type: 'explorer',\n        parent_node: 'Beoifye2flJ5ZSd3UQHcuXpOnLP',\n        file: uploadedFileData.substring(uploadedFileData.indexOf(',') + 1)\n      }\n    };\n    \n    try {\n      const response = await client.drive.file.uploadAll(options);\n      console.log('File uploaded successfully!');\n      console.log(response);\n    } catch (error) {\n      console.error('Failed to upload file to Lark');\n      console.error(error);\n    }\n  };\n\n  render() {\n    const { uploadedFileData } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div>\n          <label htmlFor=\"fileInput\">Upload PDF:</label>\n          <input type=\"file\" id=\"fileInput\" accept=\".pdf\" onChange={this.handleFileUpload} />\n        </div>\n        <button type=\"submit\" disabled={!uploadedFileData}>Submit</button>\n        {uploadedFileData && (\n          <div>\n            <h2>Uploaded PDF:</h2>\n            <iframe src={uploadedFileData} title=\"Uploaded file\" />\n          </div>\n        )}\n      </form>\n    );\n  }\n}\n\nexport default UploadForm;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,4BAA4B;AAC7C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,UAAU,SAASJ,SAAS,CAAC;EAAAK,YAAA;IAAA,SAAAC,SAAA;IAAA,KACjCC,KAAK,GAAG;MACNC,gBAAgB,EAAE;IACpB,CAAC;IAAA,KAEDC,gBAAgB,GAAIC,KAAK,IAAK;MAC5B,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAE/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QACpB,MAAMC,QAAQ,GAAGH,MAAM,CAACI,MAAM;QAC9BC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,QAAQ,CAAC;QAC9C,IAAI,CAACI,QAAQ,CAAC;UAAEb,gBAAgB,EAAES;QAAS,CAAC,CAAC;MAC/C,CAAC;MAEDH,MAAM,CAACQ,aAAa,CAACX,IAAI,CAAC;IAC5B,CAAC;IAAA,KAEDY,YAAY,GAAG,MAAOb,KAAK,IAAK;MAC9BA,KAAK,CAACc,cAAc,CAAC,CAAC;MACtB,MAAM;QAAEhB;MAAiB,CAAC,GAAG,IAAI,CAACD,KAAK;MAEvC,IAAI,CAACC,gBAAgB,EAAE;QACrB;MACF;;MAEA;MACA,MAAMiB,MAAM,GAAG,IAAIxB,IAAI,CAACyB,MAAM,CAACC,MAAM,CAAC;QACpCC,KAAK,EAAE,sBAAsB;QAC7BC,SAAS,EAAE,kCAAkC;QAC7CC,UAAU,EAAE,wBAAwB;QACpCC,OAAO,EAAE,IAAI;QACbC,iBAAiB,EAAE;MACrB,CAAC,CAAC;;MAEF;MACA,MAAMC,OAAO,GAAG;QACdC,IAAI,EAAE;UACJC,SAAS,EAAE,qBAAqB;UAChCC,WAAW,EAAE,UAAU;UACvBC,WAAW,EAAE,6BAA6B;UAC1C1B,IAAI,EAAEH,gBAAgB,CAAC8B,SAAS,CAAC9B,gBAAgB,CAAC+B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;QACpE;MACF,CAAC;MAED,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,MAAM,CAACgB,KAAK,CAAC9B,IAAI,CAAC+B,SAAS,CAACT,OAAO,CAAC;QAC3DU,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1CD,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;MACvB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,CAAC;QAC9CF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;EAAA;EAEDC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEtC;IAAiB,CAAC,GAAG,IAAI,CAACD,KAAK;IAEvC,oBACEJ,OAAA;MAAM4C,QAAQ,EAAE,IAAI,CAACxB,YAAa;MAAAyB,QAAA,gBAChC7C,OAAA;QAAA6C,QAAA,gBACE7C,OAAA;UAAO8C,OAAO,EAAC,WAAW;UAAAD,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9ClD,OAAA;UAAOmD,IAAI,EAAC,MAAM;UAACC,EAAE,EAAC,WAAW;UAACC,MAAM,EAAC,MAAM;UAACC,QAAQ,EAAE,IAAI,CAAChD;QAAiB;UAAAyC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChF,CAAC,eACNlD,OAAA;QAAQmD,IAAI,EAAC,QAAQ;QAACI,QAAQ,EAAE,CAAClD,gBAAiB;QAAAwC,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACjE7C,gBAAgB,iBACfL,OAAA;QAAA6C,QAAA,gBACE7C,OAAA;UAAA6C,QAAA,EAAI;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtBlD,OAAA;UAAQwD,GAAG,EAAEnD,gBAAiB;UAACoD,KAAK,EAAC;QAAe;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAEX;AACF;AAEA,eAAejD,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}