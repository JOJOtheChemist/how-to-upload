{"ast":null,"code":"var _jsxFileName = \"G:\\\\230310pythonproject\\\\230517-gpt-API\\\\my-react-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass UploadForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.handleFileUpload = event => {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        const fileData = reader.result;\n\n        // Increase local storage quota if possible\n        if (navigator.storage && navigator.storage.persist) {\n          navigator.storage.persist().then(granted => {\n            if (granted) {\n              console.log(\"Storage persistence granted\");\n            } else {\n              console.log(\"Storage persistence not granted\");\n            }\n          });\n        }\n        localStorage.setItem('uploadedFile', fileData);\n      };\n      reader.readAsDataURL(file);\n    };\n    this.handleSubmit = event => {\n      // handle form submission here\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fileInput\",\n          children: \"Upload PDF:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"fileInput\",\n          accept: \".pdf\",\n          onChange: this.handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default UploadForm;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","UploadForm","constructor","arguments","handleFileUpload","event","file","target","files","reader","FileReader","onload","fileData","result","navigator","storage","persist","then","granted","console","log","localStorage","setItem","readAsDataURL","handleSubmit","render","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","accept","onChange"],"sources":["G:/230310pythonproject/230517-gpt-API/my-react-app/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\n\nclass UploadForm extends Component {\n  handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n  \n    reader.onload = () => {\n      const fileData = reader.result;\n  \n      // Increase local storage quota if possible\n      if (navigator.storage && navigator.storage.persist) {\n        navigator.storage.persist().then((granted) => {\n          if (granted) {\n            console.log(\"Storage persistence granted\");\n          } else {\n            console.log(\"Storage persistence not granted\");\n          }\n        });\n      }\n  \n      localStorage.setItem('uploadedFile', fileData);\n    };\n  \n    reader.readAsDataURL(file);\n  };\n\n  handleSubmit = (event) => {\n    // handle form submission here\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div>\n          <label htmlFor=\"fileInput\">Upload PDF:</label>\n          <input type=\"file\" id=\"fileInput\" accept=\".pdf\" onChange={this.handleFileUpload} />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}\n\nexport default UploadForm;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,UAAU,SAASH,SAAS,CAAC;EAAAI,YAAA;IAAA,SAAAC,SAAA;IAAA,KACjCC,gBAAgB,GAAIC,KAAK,IAAK;MAC5B,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAE/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QACpB,MAAMC,QAAQ,GAAGH,MAAM,CAACI,MAAM;;QAE9B;QACA,IAAIC,SAAS,CAACC,OAAO,IAAID,SAAS,CAACC,OAAO,CAACC,OAAO,EAAE;UAClDF,SAAS,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAEC,OAAO,IAAK;YAC5C,IAAIA,OAAO,EAAE;cACXC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;YAC5C,CAAC,MAAM;cACLD,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;YAChD;UACF,CAAC,CAAC;QACJ;QAEAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEV,QAAQ,CAAC;MAChD,CAAC;MAEDH,MAAM,CAACc,aAAa,CAACjB,IAAI,CAAC;IAC5B,CAAC;IAAA,KAEDkB,YAAY,GAAInB,KAAK,IAAK;MACxB;IAAA,CACD;EAAA;EAEDoB,MAAMA,CAAA,EAAG;IACP,oBACEzB,OAAA;MAAM0B,QAAQ,EAAE,IAAI,CAACF,YAAa;MAAAG,QAAA,gBAChC3B,OAAA;QAAA2B,QAAA,gBACE3B,OAAA;UAAO4B,OAAO,EAAC,WAAW;UAAAD,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9ChC,OAAA;UAAOiC,IAAI,EAAC,MAAM;UAACC,EAAE,EAAC,WAAW;UAACC,MAAM,EAAC,MAAM;UAACC,QAAQ,EAAE,IAAI,CAAChC;QAAiB;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChF,CAAC,eACNhC,OAAA;QAAQiC,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAEX;AACF;AAEA,eAAe/B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}